import os
import psycopg2
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler

CREATE TABLE users (
  chat_id BIGINT PRIMARY KEY,
  name TEXT,
  emoji TEXT,
  karma INT,
  muting BOOLEAN,
  role TEXT
);

# ENV
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –†–æ–ª–∏ –∏ —É—Ä–æ–≤–Ω–∏
roles = [
    ("Halc√≥n", 0, 800, ""),
    ("Soldado", 800, 1250, "–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /all"),
    ("Cobrador", 1250, 2000, "–º–æ–∂–µ—Ç –ø—Ä–∏–∑—ã–≤–∞—Ç—å"),
    ("Reclutador", 2000, 3000, "–º–æ–∂–µ—Ç –ø—Ä–∏–∑—ã–≤–∞—Ç—å –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å"),
    ("Sicario", 3000, 4250, "–º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –º—É—Ç"),
    ("Qu√≠mico", 4250, 5600, "–º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –º—É—Ç"),
    ("Contador", 5600, 6666, "–º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –º—É—Ç"),
    ("Narcobaron", 6666, 999999, "–º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å"),
]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
def db():
    return psycopg2.connect(
        host=os.getenv("DB_HOST"),
        port=os.getenv("DB_PORT"),
        database=os.getenv("DB_NAME"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASS")
    )

# –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ –∫–∞—Ä–º–µ
def get_role(karma):
    for name, low, high, _ in roles:
        if low <= karma < high:
            return name
    return "Halc√≥n"

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ensure_user(chat_id):
    with db() as conn, conn.cursor() as cur:
        cur.execute("SELECT * FROM users WHERE chat_id=%s", (chat_id,))
        if not cur.fetchone():
            cur.execute("INSERT INTO users (chat_id, karma, emoji, muting, role) VALUES (%s, 0, 'üß®', false, 'Halc√≥n')", (chat_id,))

# –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
async def update_user_role(chat_id, karma, context):
    new_role = get_role(karma)
    with db() as conn, conn.cursor() as cur:
        cur.execute("SELECT role FROM users WHERE chat_id=%s", (chat_id,))
        result = cur.fetchone()
        if result and result[0] != new_role:
            cur.execute("UPDATE users SET role=%s WHERE chat_id=%s", (new_role, chat_id))
            for role in roles:
                if role[0] == new_role:
                    rights = role[3]
                    break
            await context.bot.send_message(chat_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Ç–µ–ø–µ—Ä—å {new_role}!\n–£ –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {rights}")
def ensure_user(chat_id):
    with db() as conn, conn.cursor() as cur:
        cur.execute("SELECT * FROM users WHERE chat_id=%s", (chat_id,))
        if not cur.fetchone():
            cur.execute("INSERT INTO users (chat_id, karma, emoji, muting, role) VALUES (%s, 0, 'üß®', false, 'Halc√≥n')", (chat_id,))

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    ensure_user(chat_id)
    await update.message.reply_text("Hola! –Ø CartelBot! üíº")

# /setname
async def setname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    name = " ".join(context.args)
    if name:
        with db() as conn, conn.cursor() as cur:
            cur.execute("UPDATE users SET name=%s WHERE chat_id=%s", (name, chat_id))
        await update.message.reply_text(f"–ü–æ–∑—ã–≤–Ω–æ–π –æ–±–Ω–æ–≤–ª—ë–Ω: {name}")

# /setemoji
async def setemoji(update: Update, context: ContextTypes.DEFAULT_TYPE):
    emoji = " ".join(context.args)
    chat_id = update.message.chat_id
    if emoji:
        with db() as conn, conn.cursor() as cur:
            cur.execute("UPDATE users SET emoji=%s WHERE chat_id=%s", (emoji, chat_id))
        await update.message.reply_text(f"–≠–º–æ–¥–∂–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {emoji}")

# /whoami
async def whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    target_id = int(context.args[0]) if context.args else chat_id
    with db() as conn, conn.cursor() as cur:
        cur.execute("SELECT name, emoji, karma, role FROM users WHERE chat_id=%s", (target_id,))
        res = cur.fetchone()
    if res:
        name, emoji, karma, role = res
        await update.message.reply_text(f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–ò–º—è: {name}\n–°–º–∞–π–ª–∏–∫: {emoji}\n–ö–∞—Ä–º–∞: {karma}\n–†–æ–ª—å: {role}")
    else:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# /settings
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
/setname <–∏–º—è> ‚Äî —Å–º–µ–Ω–∏—Ç—å –ø–æ–∑—ã–≤–Ω–æ–π
/setemoji <emoji> ‚Äî —Å–º–µ–Ω–∏—Ç—å —Å–º–∞–π–ª–∏–∫ –ø—Ä–∏–∑—ã–≤–∞
/whoami [id] ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/muteping ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–∑—ã–≤–∞
""")

# /muteping
async def muteping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    with db() as conn, conn.cursor() as cur:
        cur.execute("UPDATE users SET muting = true WHERE chat_id=%s", (chat_id,))
    await update.message.reply_text("–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã–≤—ã.")

# /famili
async def famili(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with db() as conn, conn.cursor() as cur:
        cur.execute("SELECT name, role FROM users WHERE karma > 2000")
        users = cur.fetchall()
    if users:
        text = "\n".join([f"‚Ä¢ {u[0]} ‚Äî {u[1]}" for u in users])
    else:
        text = "–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –≤—ã—à–µ —É—Ä–æ–≤–Ω—è 4."
    await update.message.reply_text("üë• Familia:\n" + text)

# /all
async def all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with db() as conn, conn.cursor() as cur:
        cur.execute("SELECT name, emoji FROM users WHERE muting = false")
        users = cur.fetchall()
    mentions = " ".join([f"{emoji} {name}" for name, emoji in users])
    await update.message.reply_text("üì¢ –ü—Ä–∏–∑—ã–≤: " + mentions)

# /gpt
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args)
    if not prompt:
        return await update.message.reply_text("–£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å.")
    response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
    await update.message.reply_text(response["choices"][0]["message"]["content"])

# /image
async def image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args)
    if not prompt:
        return await update.message.reply_text("–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    image = openai.Image.create(prompt=prompt, n=1, size="512x512")
    await update.message.reply_photo(photo=image['data'][0]['url'])

# /rep
async def rep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if context.args and context.args[0].startswith('+'):
        target = int(context.args[0][1:])
        change = 50
    elif context.args and context.args[0].startswith('-'):
        target = int(context.args[0][1:])
        change = -50
    else:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /rep +id –∏–ª–∏ /rep -id")
    with db() as conn, conn.cursor() as cur:
        cur.execute("UPDATE users SET karma = karma + %s WHERE chat_id=%s", (change, target))
    await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await update_user_role(target, change, context)

# –ê–≤—Ç–æ–∫–∞—Ä–º–∞ –≤ 00:00 –ú–°–ö
def daily_karma():
    with db() as conn, conn.cursor() as cur:
        cur.execute("UPDATE users SET karma = karma + 10")

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
scheduler = BackgroundScheduler(timezone="Europe/Moscow")
scheduler.add_job(daily_karma, "cron", hour=0, minute=0)
scheduler.start()

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("setname", setname))
app.add_handler(CommandHandler("setemoji", setemoji))
app.add_handler(CommandHandler("whoami", whoami))
app.add_handler(CommandHandler("settings", settings))
app.add_handler(CommandHandler("muteping", muteping))
app.add_handler(CommandHandler("famili", famili))
app.add_handler(CommandHandler("all", all))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("image", image))
app.add_handler(CommandHandler("rep", rep))

app.run_polling()
